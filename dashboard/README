# 🌐 Trading Bot Dashboard - Guía Completa

Dashboard web completo para monitorear y controlar el trading bot con funcionalidades de exportación, backtesting y análisis.

---

## 📋 Contenidos

1. [Características](#características)
2. [Instalación](#instalación)
3. [Uso](#uso)
4. [Endpoints API](#endpoints-api)
5. [Funcionalidades](#funcionalidades)
6. [Testing](#testing)
7. [Troubleshooting](#troubleshooting)

---

## ✨ Características

### **Monitoreo en Tiempo Real**
- 💼 Estado de la cuenta (balance, disponible, margen)
- 📊 Posiciones abiertas con detalles
- 🎯 Señales de trading recientes
- ⚙️ Configuración del bot

### **Historial y Análisis**
- 📈 Historial completo de trades
- 📊 Estadísticas detalladas (win rate, P&L, etc.)
- 🔍 Filtros por sesión y fecha
- 📉 Análisis de performance

### **Exportación de Datos**
- 📄 Exportar trades a CSV
- 📊 Exportar trades a Excel
- 📑 Generar reportes completos multi-hoja

### **Backtesting**
- 🔬 Ejecutar backtests con datos históricos
- 📈 Visualizar resultados
- 📊 Métricas de performance

### **Gestión de Sesiones**
- 📅 Ver todas las sesiones de trading
- 🔍 Detalle completo por sesión
- 📊 Comparar performance entre sesiones

---

## 🚀 Instalación

### 1. Prerrequisitos

```bash
# Python 3.9+
python --version

# PostgreSQL (Docker)
docker-compose up -d postgres

# Verificar que PostgreSQL está corriendo
docker ps | grep postgres
```

### 2. Instalar Dependencias

```bash
# Instalar todas las dependencias
pip install -r requirements.txt

# Verificar instalación
python -c "import flask; import psycopg2; import pytest; print('✅ Todo instalado')"
```

### 3. Configurar Variables de Entorno

```bash
# Copiar template
cp .env.example .env

# Editar con tus credenciales
nano .env
```

Ejemplo de `.env`:
```env
# API Credentials
CAPITAL_API_KEY=tu_api_key
CAPITAL_EMAIL=tu_email@ejemplo.com
CAPITAL_PASSWORD=tu_password

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=trading_bot
DB_USER=trader
DB_PASSWORD=trader_password

# Dashboard
DASHBOARD_PORT=5000
```

### 4. Aplicar Migraciones

```bash
# Ejecutar migraciones de BD
python database/migrations/migration_runner.py migrate

# Verificar tablas
python database/migrations/migration_runner.py status
```

### 5. Setup Automático

```bash
# Ejecutar script de setup (verifica todo)
python setup_dashboard.py
```

---

## ▶️ Uso

### Iniciar el Dashboard

#### **Opción 1: Dashboard Solo**

```bash
# Iniciar solo el dashboard
python dashboard/app.py

# El dashboard estará disponible en:
# http://localhost:5000
```

#### **Opción 2: Bot + Dashboard**

```bash
# Iniciar bot y dashboard juntos
python start_all.py

# Dashboard: http://localhost:5000
# Bot ejecutándose en background
```

### Acceder al Dashboard

1. Abre tu navegador
2. Ve a: `http://localhost:5000`
3. El dashboard se actualiza automáticamente cada 10 segundos

---

## 🌐 Endpoints API

### **Endpoints Básicos**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/` | GET | Página principal del dashboard |
| `/api/account` | GET | Información de la cuenta |
| `/api/positions` | GET | Posiciones abiertas |
| `/api/config` | GET | Configuración del bot |
| `/api/status` | GET | Estado del bot |
| `/api/health` | GET | Health check |

### **Endpoints de Trades**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/api/trades/history` | GET | Historial de trades |
| `/api/trades/history?session_id=X` | GET | Trades de una sesión |
| `/api/trades/history?limit=100` | GET | Últimos N trades |
| `/api/trades/stats` | GET | Estadísticas globales |
| `/api/trades/stats?session_id=X` | GET | Stats de una sesión |

### **Endpoints de Export**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/api/trades/export/csv` | GET | Exportar a CSV |
| `/api/trades/export/excel` | GET | Exportar a Excel |
| `/api/trades/export/csv?session_id=X` | GET | Export sesión específica |
| `/api/report/full?session_id=X` | GET | Reporte completo multi-hoja |

### **Endpoints de Sesiones**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/api/sessions/list` | GET | Listar sesiones |
| `/api/sessions/list?limit=20` | GET | Últimas N sesiones |
| `/api/sessions/<id>` | GET | Detalle de sesión |

### **Endpoints de Backtesting**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/api/backtest/run` | POST | Ejecutar backtest |

Body del POST:
```json
{
    "days": 30,
    "initial_capital": 10000,
    "assets": ["GOLD", "TSLA"]
}
```

### **Endpoints de Señales**

| Endpoint | Método | Descripción |
|----------|--------|-------------|
| `/api/signals/recent` | GET | Señales recientes |
| `/api/signals/recent?limit=20` | GET | Últimas N señales |

---

## 🎯 Funcionalidades

### **1. Monitoreo de Cuenta**

```
💼 Estado de la Cuenta
├── Balance:        €10,000.00
├── Disponible:     €8,000.00
├── Margen Usado:   €2,000.00
└── % Margen:       20.0%
```

**Actualización:** Automática cada 10 segundos

### **2. Posiciones Abiertas**

Ver todas las posiciones activas con:
- Epic (activo)
- Dirección (BUY/SELL)
- Tamaño
- Precio de entrada
- Stop Loss
- Take Profit
- Deal ID

### **3. Historial de Trades**

**Filtros disponibles:**
- Por sesión
- Límite de resultados (20, 50, 100, 200)

**Información mostrada:**
- Epic
- Dirección
- Entry/Exit prices
- Size
- P&L (€ y %)
- Razón de cierre
- Fecha

### **4. Exportación de Trades**

#### **CSV**
```
Epic, Direction, Entry Price, Exit Price, Size, PnL, PnL %, Reason, Date
GOLD, BUY, 1800.00, 1850.00, 1.0, 50.00, 2.78, TAKE_PROFIT, 2025-01-06 10:30
...
```

#### **Excel**
Exporta con formato profesional:
- Headers en negrita
- Números formateados
- Colores por P&L (verde/rojo)

#### **Reporte Completo**
Múltiples hojas:
1. **Resumen**: Info de la sesión
2. **Trades**: Todos los trades
3. **Estadísticas**: Métricas agregadas
4. **Señales**: Señales generadas

### **5. Estadísticas**

Métricas calculadas automáticamente:
- Total de trades
- Trades ganadores/perdedores
- Win rate (%)
- Ganancia promedio
- Pérdida promedio
- Mayor ganancia
- Mayor pérdida
- Profit factor
- Max drawdown

### **6. Backtesting**

**Configuración:**
- Días históricos (1-365)
- Capital inicial (min €100)
- Activos (opcional)

**Resultados:**
- Capital inicial/final
- Retorno total (€ y %)
- Total de trades
- Win rate
- Profit factor
- Max drawdown
- Equity curve
- Lista de trades

### **7. Señales de Trading**

Ver las últimas señales generadas:
- Epic
- Tipo (BUY/SELL/NEUTRAL)
- Confianza (%)
- Precio actual
- Indicadores
- Razones
- Estado (Ejecutada/Pendiente)

---

## 🧪 Testing

### Ejecutar Tests

```bash
# Todos los tests del dashboard
python run_tests.py dashboard

# Tests específicos
pytest tests/test_dashboard_integration.py -v

# Con coverage
python run_tests.py dashboard --cov --html
```

### Tests Disponibles

El archivo `test_dashboard_integration.py` incluye **30+ tests** que verifican:

✅ Endpoints básicos
✅ Historial de trades
✅ Estadísticas
✅ Exports (CSV, Excel, Reportes)
✅ Sesiones
✅ Backtesting
✅ Señales
✅ Health checks
✅ Error handling
✅ Performance

Ver [tests/README.md](tests/README.md) para más detalles.

---

## 🔧 Troubleshooting

### Problema: Dashboard no carga

```bash
# Verificar que Flask está instalado
pip install flask flask-cors

# Verificar puerto 5000 no está en uso
netstat -ano | findstr :5000  # Windows
lsof -i :5000                 # Mac/Linux

# Usar otro puerto
python dashboard/app.py --port 8080
```

### Problema: No se ven trades

```bash
# Verificar que PostgreSQL está corriendo
docker ps | grep postgres

# Verificar tablas
python -c "from database.connection import DatabaseConnection; db = DatabaseConnection(); print('✅ Connected')"

# Verificar que hay trades en BD
docker exec -it trading_bot_postgres psql -U trader -d trading_bot -c "SELECT COUNT(*) FROM trades;"
```

### Problema: Exports fallan

```bash
# Crear carpeta exports
mkdir exports

# Verificar permisos
chmod 755 exports

# Verificar openpyxl instalado
pip install openpyxl
```

### Problema: API no responde

```bash
# Verificar credenciales en .env
cat .env | grep CAPITAL

# Test de conexión
python -c "from api.capital_client import CapitalClient; api = CapitalClient(); print('Auth:', api.authenticate())"
```

### Problema: Tests fallan

```bash
# Verificar pytest instalado
pip install pytest pytest-flask pytest-cov

# Ejecutar setup
python setup_dashboard.py

# Ejecutar un test individual
pytest tests/test_dashboard_integration.py::test_api_config -v
```

---

## 📚 Estructura de Archivos

```
trading_bot/
├── dashboard/
│   ├── app.py                 # ← API Flask completa
│   ├── templates/
│   │   └── index.html         # ← Frontend
│   └── static/
│       ├── css/
│       │   └── style.css      # ← Estilos
│       └── js/
│           └── main.js        # ← JavaScript
├── database/
│   └── queries/
│       └── analytics.py       # ← Queries SQL
├── tests/
│   ├── test_dashboard_integration.py  # ← Tests
│   ├── conftest.py            # ← Fixtures
│   └── README.md              # ← Guía de tests
├── exports/                   # ← Archivos exportados
├── setup_dashboard.py         # ← Script de setup
├── run_tests.py               # ← Ejecutar tests
├── pytest.ini                 # ← Config pytest
└── requirements.txt           # ← Dependencias
```

---

## 🎨 Personalización

### Cambiar Puerto

```python
# dashboard/app.py
if __name__ == '__main__':
    run_dashboard(port=8080)  # Cambiar aquí
```

### Cambiar Intervalo de Refresh

```javascript
// dashboard/static/js/main.js
const REFRESH_INTERVAL = 5000;  // 5 segundos
```

### Agregar Nuevo Endpoint

```python
# dashboard/app.py
@app.route('/api/mi_endpoint')
def mi_endpoint():
    # Tu código
    return jsonify({'data': ...})
```

Luego agregar test:
```python
# tests/test_dashboard_integration.py
def test_mi_endpoint(client):
    response = client.get('/api/mi_endpoint')
    assert response.status_code == 200
```

---

## 🚀 Próximos Pasos

Una vez que el dashboard esté funcionando:

1. **Ejecutar el bot**
   ```bash
   python start_all.py
   ```

2. **Dejar correr algunas horas** para generar datos

3. **Explorar el dashboard** en http://localhost:5000

4. **Exportar reportes** para análisis

5. **Ejecutar backtests** para probar estrategias

6. **Revisar métricas** y optimizar la estrategia

---

## 📞 Soporte

- **Tests:** `python run_tests.py dashboard`
- **Setup:** `python setup_dashboard.py`
- **Logs:** Revisar `logs/` y consola

---

**¡El dashboard está listo! 🎉**

Ejecuta `python start_all.py` y abre http://localhost:5000